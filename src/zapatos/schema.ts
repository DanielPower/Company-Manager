/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v0.1.56), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 George MacKerron
Released under the MIT licence: see LICENCE file
*/

import type {
  JSONValue,
  JSONArray,
  DateString,
  SQLFragment,
  SQL,
  GenericSQLExpression,
  ColumnNames,
  ColumnValues,
  Parameter,
  ParentColumn,
  DefaultType,
} from './src/core';


/* === schema: public === */

/* --- enums --- */


/* --- tables --- */

export declare namespace employee {
  export type Table = 'employee';
  export interface Selectable {
    id: number;
    name: string;
    password_hash: string;
    is_admin: boolean;
    start_date: Date;
  }
  export interface Insertable {
    id: number | Parameter<number> | SQLFragment;
    name: string | Parameter<string> | SQLFragment;
    password_hash: string | Parameter<string> | SQLFragment;
    is_admin: boolean | Parameter<boolean> | SQLFragment;
    start_date: Date | Parameter<Date> | DateString | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export type Whereable = { [K in keyof Insertable]?: Exclude<Insertable[K] | ParentColumn, null | DefaultType> };
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = 'employee_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = GenericSQLExpression | Table | Whereable | Column | ColumnNames<Updatable | (keyof Updatable)[]> | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export declare namespace job {
  export type Table = 'job';
  export interface Selectable {
    id: number;
    name: string;
    hour_type: number;
  }
  export interface Insertable {
    id: number | Parameter<number> | SQLFragment;
    name: string | Parameter<string> | SQLFragment;
    hour_type: number | Parameter<number> | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export type Whereable = { [K in keyof Insertable]?: Exclude<Insertable[K] | ParentColumn, null | DefaultType> };
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = 'job_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = GenericSQLExpression | Table | Whereable | Column | ColumnNames<Updatable | (keyof Updatable)[]> | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

export declare namespace shift {
  export type Table = 'shift';
  export interface Selectable {
    id: number;
    date: Date;
    description: string;
    hours: number;
    banked_hours: number;
    night_shift: boolean;
    job_id: number;
    employee_id: number;
  }
  export interface Insertable {
    id: number | Parameter<number> | SQLFragment;
    date: Date | Parameter<Date> | DateString | SQLFragment;
    description: string | Parameter<string> | SQLFragment;
    hours: number | Parameter<number> | SQLFragment;
    banked_hours: number | Parameter<number> | SQLFragment;
    night_shift: boolean | Parameter<boolean> | SQLFragment;
    job_id: number | Parameter<number> | SQLFragment;
    employee_id: number | Parameter<number> | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export type Whereable = { [K in keyof Insertable]?: Exclude<Insertable[K] | ParentColumn, null | DefaultType> };
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = 'shift_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = GenericSQLExpression | Table | Whereable | Column | ColumnNames<Updatable | (keyof Updatable)[]> | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

/* === cross-table types === */

export type Table = employee.Table | job.Table | shift.Table;
export type Selectable = employee.Selectable | job.Selectable | shift.Selectable;
export type Whereable = employee.Whereable | job.Whereable | shift.Whereable;
export type Insertable = employee.Insertable | job.Insertable | shift.Insertable;
export type Updatable = employee.Updatable | job.Updatable | shift.Updatable;
export type UniqueIndex = employee.UniqueIndex | job.UniqueIndex | shift.UniqueIndex;
export type Column = employee.Column | job.Column | shift.Column;
export type AllTables = [employee.Table, job.Table, shift.Table];


export type SelectableForTable<T extends Table> = {
  employee: employee.Selectable;
  job: job.Selectable;
  shift: shift.Selectable;
}[T];

export type WhereableForTable<T extends Table> = {
  employee: employee.Whereable;
  job: job.Whereable;
  shift: shift.Whereable;
}[T];

export type InsertableForTable<T extends Table> = {
  employee: employee.Insertable;
  job: job.Insertable;
  shift: shift.Insertable;
}[T];

export type UpdatableForTable<T extends Table> = {
  employee: employee.Updatable;
  job: job.Updatable;
  shift: shift.Updatable;
}[T];

export type UniqueIndexForTable<T extends Table> = {
  employee: employee.UniqueIndex;
  job: job.UniqueIndex;
  shift: shift.UniqueIndex;
}[T];

export type ColumnForTable<T extends Table> = {
  employee: employee.Column;
  job: job.Column;
  shift: shift.Column;
}[T];

export type SQLForTable<T extends Table> = {
  employee: employee.SQL;
  job: job.SQL;
  shift: shift.SQL;
}[T];

