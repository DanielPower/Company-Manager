/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v2.0.0), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 George MacKerron
Released under the MIT licence: see LICENCE file
*/

import * as db from './src/core';

type BasicWhereableFromInsertable<T> = { [K in keyof T]: Exclude<T[K] | db.ParentColumn, null | db.DefaultType> };
type WhereableFromBasicWhereable<T> = { [K in keyof T]?: T[K] | db.SQLFragment<any, T[K]> };
type WhereableFromInsertable<T> = WhereableFromBasicWhereable<BasicWhereableFromInsertable<T>>;

type UpdatableFromInsertable<T> = { [K in keyof T]?: T[K] | db.SQLFragment<any, T[K]> };

type JSONSelectableFromSelectable<T> = { [K in keyof T]:
  Date extends T[K] ? Exclude<T[K], Date> | db.DateString :
  Date[] extends T[K] ? Exclude<T[K], Date[]> | db.DateString[] :
  T[K]
};

/* === schema: public === */

/* --- enums --- */


/* --- tables --- */

export declare namespace employee {
  export type Table = 'employee';
  export interface Selectable {
    id: number;
    name: string;
    passwordHash: string;
    isAdmin: boolean;
    startDate: Date;
  }
  export interface Insertable {
    id: number | db.Parameter<number> | db.SQLFragment;
    name: string | db.Parameter<string> | db.SQLFragment;
    passwordHash: string | db.Parameter<string> | db.SQLFragment;
    isAdmin: boolean | db.Parameter<boolean> | db.SQLFragment;
    startDate: Date | db.Parameter<Date> | db.DateString | db.SQLFragment;
  }
  export interface Updatable extends UpdatableFromInsertable<Insertable> { }
  export interface Whereable extends WhereableFromInsertable<Insertable> { }
  export interface JSONSelectable extends JSONSelectableFromSelectable<Selectable> { }
  export type UniqueIndex = 'employee_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
  export type SQL = SQLExpression | SQLExpression[];
}

export declare namespace job {
  export type Table = 'job';
  export interface Selectable {
    id: number;
    name: string;
    hourType: number;
  }
  export interface Insertable {
    id: number | db.Parameter<number> | db.SQLFragment;
    name: string | db.Parameter<string> | db.SQLFragment;
    hourType: number | db.Parameter<number> | db.SQLFragment;
  }
  export interface Updatable extends UpdatableFromInsertable<Insertable> { }
  export interface Whereable extends WhereableFromInsertable<Insertable> { }
  export interface JSONSelectable extends JSONSelectableFromSelectable<Selectable> { }
  export type UniqueIndex = 'job_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
  export type SQL = SQLExpression | SQLExpression[];
}

export declare namespace payPeriod {
  export type Table = 'payPeriod';
  export interface Selectable {
    id: number;
    date: Date;
    employeeId: number;
    isSubmitted: boolean | null;
  }
  export interface Insertable {
    id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
    date: Date | db.Parameter<Date> | db.DateString | db.SQLFragment;
    employeeId: number | db.Parameter<number> | db.SQLFragment;
    isSubmitted?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment;
  }
  export interface Updatable extends UpdatableFromInsertable<Insertable> { }
  export interface Whereable extends WhereableFromInsertable<Insertable> { }
  export interface JSONSelectable extends JSONSelectableFromSelectable<Selectable> { }
  export type UniqueIndex = 'payPeriod_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
  export type SQL = SQLExpression | SQLExpression[];
}

export declare namespace shift {
  export type Table = 'shift';
  export interface Selectable {
    id: number;
    date: Date;
    description: string;
    hoursWorked: number;
    hoursBanked: number;
    nightShift: boolean;
    jobId: number;
    payPeriodId: number;
  }
  export interface Insertable {
    id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
    date: Date | db.Parameter<Date> | db.DateString | db.SQLFragment;
    description: string | db.Parameter<string> | db.SQLFragment;
    hoursWorked: number | db.Parameter<number> | db.SQLFragment;
    hoursBanked: number | db.Parameter<number> | db.SQLFragment;
    nightShift: boolean | db.Parameter<boolean> | db.SQLFragment;
    jobId: number | db.Parameter<number> | db.SQLFragment;
    payPeriodId: number | db.Parameter<number> | db.SQLFragment;
  }
  export interface Updatable extends UpdatableFromInsertable<Insertable> { }
  export interface Whereable extends WhereableFromInsertable<Insertable> { }
  export interface JSONSelectable extends JSONSelectableFromSelectable<Selectable> { }
  export type UniqueIndex = 'shift_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
  export type SQL = SQLExpression | SQLExpression[];
}

/* === cross-table types === */

export type Table = employee.Table | job.Table | payPeriod.Table | shift.Table;
export type Selectable = employee.Selectable | job.Selectable | payPeriod.Selectable | shift.Selectable;
export type Whereable = employee.Whereable | job.Whereable | payPeriod.Whereable | shift.Whereable;
export type Insertable = employee.Insertable | job.Insertable | payPeriod.Insertable | shift.Insertable;
export type Updatable = employee.Updatable | job.Updatable | payPeriod.Updatable | shift.Updatable;
export type UniqueIndex = employee.UniqueIndex | job.UniqueIndex | payPeriod.UniqueIndex | shift.UniqueIndex;
export type Column = employee.Column | job.Column | payPeriod.Column | shift.Column;
export type AllTables = [employee.Table, job.Table, payPeriod.Table, shift.Table];


export type SelectableForTable<T extends Table> = {
  employee: employee.Selectable;
  job: job.Selectable;
  payPeriod: payPeriod.Selectable;
  shift: shift.Selectable;
}[T];

export type WhereableForTable<T extends Table> = {
  employee: employee.Whereable;
  job: job.Whereable;
  payPeriod: payPeriod.Whereable;
  shift: shift.Whereable;
}[T];

export type InsertableForTable<T extends Table> = {
  employee: employee.Insertable;
  job: job.Insertable;
  payPeriod: payPeriod.Insertable;
  shift: shift.Insertable;
}[T];

export type UpdatableForTable<T extends Table> = {
  employee: employee.Updatable;
  job: job.Updatable;
  payPeriod: payPeriod.Updatable;
  shift: shift.Updatable;
}[T];

export type UniqueIndexForTable<T extends Table> = {
  employee: employee.UniqueIndex;
  job: job.UniqueIndex;
  payPeriod: payPeriod.UniqueIndex;
  shift: shift.UniqueIndex;
}[T];

export type ColumnForTable<T extends Table> = {
  employee: employee.Column;
  job: job.Column;
  payPeriod: payPeriod.Column;
  shift: shift.Column;
}[T];

export type SQLForTable<T extends Table> = {
  employee: employee.SQL;
  job: job.SQL;
  payPeriod: payPeriod.SQL;
  shift: shift.SQL;
}[T];

